{"cells": [{"metadata": {}, "cell_type": "code", "source": "from pandas import read_csv\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport sklearn\nimport numpy as np", "execution_count": 1, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "\nimport types\nimport pandas as pd\nfrom botocore.client import Config\nimport ibm_boto3\n\ndef __iter__(self): return 0\n\n# @hidden_cell\n# The following code accesses a file in your IBM Cloud Object Storage. It includes your credentials.\n# You might want to remove those credentials before you share the notebook.\nclient_64c85547f35d43b5b41b68c871da81d6 = ibm_boto3.client(service_name='s3',\n    ibm_api_key_id='HcWLNSvsllJ6yiZ0P9bQiEHBvJ5Ty-JY0OoShzpA1FLl',\n    ibm_auth_endpoint=\"https://iam.cloud.ibm.com/oidc/token\",\n    config=Config(signature_version='oauth'),\n    endpoint_url='https://s3.eu-geo.objectstorage.service.networklayer.com')\n\nbody = client_64c85547f35d43b5b41b68c871da81d6.get_object(Bucket='hanif-donotdelete-pr-nx1leyc1obvpqp',Key='windtime.csv')['Body']\n# add missing __iter__ method, so pandas accepts body as file-like object\nif not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\ndataframe = pd.read_csv(body,index_col='Date/Time')\ndataframe.head()\n", "execution_count": 5, "outputs": [{"output_type": "execute_result", "execution_count": 5, "data": {"text/plain": "                     Wind Speed (m/s)\nDate/Time                            \n2018-01-01 00:00:00          5.311336\n2018-01-01 00:10:00          5.672167\n2018-01-01 00:20:00          5.216037\n2018-01-01 00:30:00          5.659674\n2018-01-01 00:40:00          5.577941", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Wind Speed (m/s)</th>\n    </tr>\n    <tr>\n      <th>Date/Time</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2018-01-01 00:00:00</th>\n      <td>5.311336</td>\n    </tr>\n    <tr>\n      <th>2018-01-01 00:10:00</th>\n      <td>5.672167</td>\n    </tr>\n    <tr>\n      <th>2018-01-01 00:20:00</th>\n      <td>5.216037</td>\n    </tr>\n    <tr>\n      <th>2018-01-01 00:30:00</th>\n      <td>5.659674</td>\n    </tr>\n    <tr>\n      <th>2018-01-01 00:40:00</th>\n      <td>5.577941</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "\ndataset = dataframe.values\ndataset.shape", "execution_count": 6, "outputs": [{"output_type": "execute_result", "execution_count": 6, "data": {"text/plain": "(50530, 1)"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "# split into train and test sets\ntrain_size = int(len(dataset) * 0.67)\ntest_size = len(dataset) - train_size\ntrain, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\nprint(len(train), len(test))", "execution_count": 7, "outputs": [{"output_type": "stream", "text": "33855 16675\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "code", "source": "# convert an array of values into a dataset matrix\ndef create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)", "execution_count": 8, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "# reshape into X=t and Y=t+1\nlook_back = 1\ntrainX, trainY = create_dataset(train, look_back)\ntestX, testY = create_dataset(test, look_back)", "execution_count": 9, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "import matplotlib.pyplot as plt\nimport pandas\nfrom keras.models import Sequential\nfrom keras.layers import Dense", "execution_count": 10, "outputs": [{"output_type": "stream", "text": "Using TensorFlow backend.\n", "name": "stderr"}]}, {"metadata": {}, "cell_type": "code", "source": "# create and fit Multilayer Perceptron model\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=look_back, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(trainX, trainY, epochs=15, batch_size=2, verbose=2)", "execution_count": 11, "outputs": [{"output_type": "stream", "text": "WARNING:tensorflow:From /opt/conda/envs/Python36/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nColocations handled automatically by placer.\nWARNING:tensorflow:From /opt/conda/envs/Python36/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.cast instead.\nEpoch 1/15\n - 105s - loss: 2.6561\nEpoch 2/15\n - 106s - loss: 0.5836\nEpoch 3/15\n - 109s - loss: 0.5842\nEpoch 4/15\n - 105s - loss: 0.5826\nEpoch 5/15\n - 106s - loss: 0.5833\nEpoch 6/15\n - 106s - loss: 0.5818\nEpoch 7/15\n - 106s - loss: 0.5819\nEpoch 8/15\n - 105s - loss: 0.5814\nEpoch 9/15\n - 108s - loss: 0.5806\nEpoch 10/15\n - 105s - loss: 0.5792\nEpoch 11/15\n - 105s - loss: 0.5780\nEpoch 12/15\n - 109s - loss: 0.5785\nEpoch 13/15\n - 105s - loss: 0.5788\nEpoch 14/15\n - 109s - loss: 0.5771\nEpoch 15/15\n - 103s - loss: 0.5767\n", "name": "stdout"}, {"output_type": "execute_result", "execution_count": 11, "data": {"text/plain": "<keras.callbacks.History at 0x7fd90280a828>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "import math\n# Estimate model performance\ntrainScore = model.evaluate(trainX, trainY, verbose=0)\nprint('Train Score: %.2f MSE (%.2f RMSE)' % (trainScore, math.sqrt(trainScore)))\ntestScore = model.evaluate(testX, testY, verbose=0)\nprint('Test Score: %.2f MSE (%.2f RMSE)' % (testScore, math.sqrt(testScore)))", "execution_count": 12, "outputs": [{"output_type": "stream", "text": "Train Score: 0.58 MSE (0.76 RMSE)\nTest Score: 0.54 MSE (0.74 RMSE)\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "code", "source": "# generate predictions for training\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)\n\n# shift train predictions for plotting\ntrainPredictPlot = np.empty_like(dataset)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(dataset)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n\n# plot baseline and predictions\nplt.plot(dataset)\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()", "execution_count": 13, "outputs": [{"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "\n"}, "metadata": {"needs_background": "light"}}]}, {"metadata": {}, "cell_type": "code", "source": "model.predict([14.32318974])", "execution_count": 14, "outputs": [{"output_type": "execute_result", "execution_count": 14, "data": {"text/plain": "array([[14.343465]], dtype=float32)"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "from watson_machine_learning_client import WatsonMachineLearningAPIClient", "execution_count": 15, "outputs": [{"output_type": "stream", "text": "2020-07-15 20:14:18,298 - watson_machine_learning_client.metanames - WARNING - 'AUTHOR_EMAIL' meta prop is deprecated. It will be ignored.\n2020-07-15 20:14:46,018 - watson_machine_learning_client.metanames - WARNING - 'AUTHOR_EMAIL' meta prop is deprecated. It will be ignored.\n", "name": "stderr"}]}, {"metadata": {}, "cell_type": "code", "source": "wml_credentials = {\n  \"apikey\": \"QuSmbGeiwc4rLIvkd7u9XlXT_BaUXz484WYJDZqMHgkv\",\n  \"iam_apikey_description\": \"Auto-generated for key 27397623-293a-4730-b879-f94efa868a6b\",\n  \"iam_apikey_name\": \"Service credentials-3\",\n  \"iam_role_crn\": \"crn:v1:bluemix:public:iam::::serviceRole:Writer\",\n  \"iam_serviceid_crn\": \"crn:v1:bluemix:public:iam-identity::a/1af47d91ccdc47489f9955bf340a1583::serviceid:ServiceId-513d29ff-5fea-4473-abd9-c35ee4c8ce2d\",\n  \"instance_id\": \"fdc0cfe6-e3a5-4958-af00-d1453d727e98\",\n  \"url\": \"https://eu-gb.ml.cloud.ibm.com\"\n}", "execution_count": 16, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "client= WatsonMachineLearningAPIClient(wml_credentials)", "execution_count": 17, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "metadata = {\n        client.repository.ModelMetaNames.AUTHOR_NAME: 'Mohamed Abdullah',\n        client.repository.ModelMetaNames.AUTHOR_EMAIL: 'abdullahmohamed2540@gmail.com',\n        client.repository.ModelMetaNames.NAME: 'Prediction of Wind Speed',\n        client.repository.ModelMetaNames.FRAMEWORK_NAME: 'tensorflow',\n        client.repository.ModelMetaNames.FRAMEWORK_VERSION: '1.15',\n        client.repository.ModelMetaNames.FRAMEWORK_LIBRARIES:[{'name':'keras', 'version':'2.2.4'}]\n}\n", "execution_count": 18, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "model_result_path = 'speed_prediction1.h5'\nmodel.save(model_result_path)\n", "execution_count": 22, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "!tar -zcvf speed_prediction1.tgz speed_prediction1.h5\n", "execution_count": 23, "outputs": [{"output_type": "stream", "text": "speed_prediction1.h5\r\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "code", "source": "stored_data = client.repository.store_model(model='speed_prediction1.tgz' ,meta_props=metadata, training_data =trainX, training_target=trainY)\n", "execution_count": 24, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "stored_data\n", "execution_count": 25, "outputs": [{"output_type": "execute_result", "execution_count": 25, "data": {"text/plain": "{'metadata': {'guid': '8bf32a86-4413-42d3-a692-e1881d71f92e',\n  'url': 'https://eu-gb.ml.cloud.ibm.com/v3/wml_instances/fdc0cfe6-e3a5-4958-af00-d1453d727e98/published_models/8bf32a86-4413-42d3-a692-e1881d71f92e',\n  'created_at': '2020-07-15T20:14:46.230Z',\n  'modified_at': '2020-07-15T20:14:46.286Z'},\n 'entity': {'runtime_environment': 'None Provided',\n  'learning_configuration_url': 'https://eu-gb.ml.cloud.ibm.com/v3/wml_instances/fdc0cfe6-e3a5-4958-af00-d1453d727e98/published_models/8bf32a86-4413-42d3-a692-e1881d71f92e/learning_configuration',\n  'author': {'name': 'Mohamed Abdullah'},\n  'name': 'Prediction of Wind Speed',\n  'learning_iterations_url': 'https://eu-gb.ml.cloud.ibm.com/v3/wml_instances/fdc0cfe6-e3a5-4958-af00-d1453d727e98/published_models/8bf32a86-4413-42d3-a692-e1881d71f92e/learning_iterations',\n  'feedback_url': 'https://eu-gb.ml.cloud.ibm.com/v3/wml_instances/fdc0cfe6-e3a5-4958-af00-d1453d727e98/published_models/8bf32a86-4413-42d3-a692-e1881d71f92e/feedback',\n  'latest_version': {'url': 'https://eu-gb.ml.cloud.ibm.com/v3/ml_assets/models/8bf32a86-4413-42d3-a692-e1881d71f92e/versions/438d7d83-17f8-408b-9ca4-6532d4b48b00',\n   'guid': '438d7d83-17f8-408b-9ca4-6532d4b48b00',\n   'created_at': '2020-07-15T20:14:46.286Z'},\n  'model_type': 'tensorflow-1.15',\n  'deployments': {'count': 0,\n   'url': 'https://eu-gb.ml.cloud.ibm.com/v3/wml_instances/fdc0cfe6-e3a5-4958-af00-d1453d727e98/published_models/8bf32a86-4413-42d3-a692-e1881d71f92e/deployments'},\n  'evaluation_metrics_url': 'https://eu-gb.ml.cloud.ibm.com/v3/wml_instances/fdc0cfe6-e3a5-4958-af00-d1453d727e98/published_models/8bf32a86-4413-42d3-a692-e1881d71f92e/evaluation_metrics'}}"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "guid = client.repository.get_model_uid(stored_data)\n", "execution_count": 26, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "guid", "execution_count": 27, "outputs": [{"output_type": "execute_result", "execution_count": 27, "data": {"text/plain": "'8bf32a86-4413-42d3-a692-e1881d71f92e'"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "model_deployment_details = client.deployments.create(guid)", "execution_count": null, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "scoring_endpoint = client.deployments.get_scoring_url(model_deployment_details)", "execution_count": null, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "scoring_endpoint", "execution_count": null, "outputs": []}], "metadata": {"kernelspec": {"name": "python3", "display_name": "Python 3.6", "language": "python"}, "language_info": {"name": "python", "version": "3.6.9", "mimetype": "text/x-python", "codemirror_mode": {"name": "ipython", "version": 3}, "pygments_lexer": "ipython3", "nbconvert_exporter": "python", "file_extension": ".py"}}, "nbformat": 4, "nbformat_minor": 1}